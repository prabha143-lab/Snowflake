-- ‚úÖ Using a powerful role to set up objects and privileges
USE ROLE ACCOUNTADMIN;

-- ‚úÖ Step 1: Create a database if it doesn't exist
CREATE DATABASE IF NOT EXISTS sample_db;
USE sample_db;

-- ‚úÖ Step 2: Create a schema inside the database
CREATE SCHEMA IF NOT EXISTS admin_schema;
USE SCHEMA admin_schema;

-- ‚úÖ Step 3: Create a secure table inside the schema
CREATE OR REPLACE TABLE secure_table (
  id INT,
  name STRING
);

-- ‚úÖ Insert sample data into the secure table
INSERT INTO admin_schema.secure_table VALUES (1, 'Alice'), (2, 'Bob');

-- ‚úÖ Create a limited role with no access to the table
CREATE OR REPLACE ROLE limited_role;
GRANT ROLE limited_role TO USER prabhakarreddy1433;

-- üö´ No SELECT privilege granted to limited_role on secure_table
-- üö´ No EXECUTE privilege granted yet on procedures

-- ‚úÖ Create a procedure that runs with caller's privileges
-- ‚ùó Will fail if caller lacks SELECT privilege on secure_table
CREATE OR REPLACE PROCEDURE admin_schema.proc_execute_as_caller()
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
BEGIN
    RETURN (SELECT COUNT(*) FROM admin_schema.secure_table)::STRING;
END;
$$;

-- ‚úÖ Create a procedure that runs with owner's privileges
-- ‚úÖ Will succeed even if caller lacks access to secure_table
CREATE OR REPLACE PROCEDURE admin_schema.proc_execute_as_owner()
RETURNS STRING
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
BEGIN
    RETURN (SELECT COUNT(*) FROM admin_schema.secure_table)::STRING;
END;
$$;

-- ‚úÖ Switch to limited_role to test access
USE ROLE limited_role;

-- ‚ùå This will fail:
-- Reason 1: limited_role lacks USAGE on schema and EXECUTE on procedure
-- Reason 2: limited_role lacks SELECT on secure_table
CALL admin_schema.proc_execute_as_caller();  
-- Expected error: SQL compilation error: Unknown user-defined function ADMIN_SCHEMA.PROC_EXECUTE_AS_CALLER

-- ‚úÖ This will succeed:
-- Reason: Procedure runs with owner's privileges (ACCOUNTADMIN)
CALL admin_schema.proc_execute_as_owner();  
-- Expected output: 2




******************************************************************************

‚ÄúEXECUTE AS CALLER requires the invoking role to have SELECT on the table, USAGE on the schema, and 
EXECUTE on the procedure ‚Äî whereas EXECUTE AS OWNER bypasses caller privileges and runs with the procedure owners access.‚Äù


‚ÄúProcedures with EXECUTE AS CALLER require the invoking role to have full access ‚Äî SELECT on the table, USAGE on the schema, and 
EXECUTE on the procedure ‚Äî while EXECUTE AS OWNER runs with the creators privileges, bypassing caller-level grants